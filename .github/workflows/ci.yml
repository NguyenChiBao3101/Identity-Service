name: CI/CD Pipeline with Security Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-zap:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: 310115cb@
          MYSQL_DATABASE: identity_service
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -p310115cb@"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -p'310115cb@'; then
              break
            fi
            sleep 2
          done

      - name: Build with Maven
        run: ./mvnw clean package -DskipTests

      - name: Run Spring Boot app
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/identity_service
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: 310115cb@
          JWT_SIGNER_KEY: your-sign-key
        run: nohup ./mvnw spring-boot:run > spring.log 2>&1 &

      - name: Wait for Spring Boot to be ready
        run: |
          for i in {1..30}; do
            if nc -z localhost 8386; then
              echo "Spring Boot started"
              break
            fi
            sleep 5
          done

      - name: Print Spring Boot log
        run: cat spring.log || true

      - name: Get runner IP
        id: get_ip
        run: echo "IP=$(hostname -I | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: Check if app is running
        run: |
          curl -v http://localhost:8386 || true
          curl -v http://${{ steps.get_ip.outputs.IP }}:8386 || true

      - name: Run integration tests
        env:
          JWT_SIGNER_KEY: ${{ vars.JWT_SIGNER_KEY }}
        run: ./mvnw test

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://${{ steps.get_ip.outputs.IP }}:8386'
          fail_action: false
          cmd_options: '-a -r report_html.html -J report_json.json -w report_md.md'
          artifact_name: zaps
          token: ${{ secrets.ZAP_TOKEN }}
          allow_issue_writing: true

      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
